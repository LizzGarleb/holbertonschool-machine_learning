#!/usr/bin/env python3

import numpy as np
dropout_forward_prop = __import__('4-dropout_forward_prop').dropout_forward_prop


def one_hot(Y, classes):
    """convert an array to a one-hot matrix"""
    m = Y.shape[0]
    one_hot = np.zeros((classes, m))
    one_hot[Y, np.arange(m)] = 1
    return one_hot

if __name__ == '__main__':
    lib= np.load('../data/MNIST.npz')
    X_train_3D = lib['X_train']
    Y_train = lib['Y_train']
    X_train = X_train_3D.reshape((X_train_3D.shape[0], -1)).T
    Y_train_oh = one_hot(Y_train, 10)

    np.random.seed(0)

    weights = {}
    weights['W1'] = np.random.randn(256, 784)
    weights['b1'] = np.zeros((256, 1))
    weights['W2'] = np.random.randn(128, 256)
    weights['b2'] = np.zeros((128, 1))
    weights['W3'] = np.random.randn(10, 128)
    weights['b3'] = np.zeros((10, 1))

    cache = dropout_forward_prop(X_train, weights, 3, 0.8)
    for k, v in sorted(cache.items()):
        print(k, v)

# Expected Output:
# A0 [[0. 0. 0. ... 0. 0. 0.]
#  [0. 0. 0. ... 0. 0. 0.]
#  [0. 0. 0. ... 0. 0. 0.]
#  ...
#  [0. 0. 0. ... 0. 0. 0.]
#  [0. 0. 0. ... 0. 0. 0.]
#  [0. 0. 0. ... 0. 0. 0.]]
# A1 [[-1.24999999 -1.25       -1.24999945 ... -1.25       -1.25
#   -1.25      ]
#  [ 1.25        1.24999777  1.25       ...  0.37738875  1.24999717
#   -1.24999889]
#  [ 0.19383179 -0.80653094 -1.24950714 ...  1.24253535  1.08653948
#   -1.20190135]
#  ...
#  [-1.25       -1.25        0.         ... -0.         -1.25
#   -1.24999852]
#  [-1.0858595  -1.25        0.         ...  1.24972487 -0.88878698
#   -1.24999933]
#  [ 1.25        1.24999648  0.2057473  ...  0.          1.23194191
#   -1.24908257]]
# A2 [[-1.25        0.          1.24985922 ... -1.25        0.
#    1.24996854]
#  [-0.         -0.         -0.         ... -1.24996232 -0.70684864
#    1.25      ]
#  [-1.25        0.          0.18486152 ... -1.24999999 -1.25
#   -1.24999989]
#  ...
#  [ 1.2404131   1.25        1.25       ...  1.1670038   1.25
#   -0.        ]
#  [ 1.25        1.25       -1.24998041 ...  1.2400913  -1.25
#    1.23620006]
#  [ 0.93426582  1.25        1.25       ...  1.24999867 -1.25
#   -0.        ]]
# A3 [[9.13222086e-07 1.53352996e-09 4.02988574e-13 ... 2.93685964e-04
#   2.21615443e-11 7.95945899e-04]
#  [4.10709405e-16 4.27810333e-11 7.38725096e-07 ... 2.05423847e-17
#   2.66482686e-09 1.74341031e-12]
#  [9.82953561e-01 9.88655425e-01 9.73580864e-01 ... 1.14493065e-03
#   9.28074126e-10 1.92423905e-13]
#  ...
#  [3.03047424e-04 1.11981605e-02 4.72284535e-05 ... 1.25781567e-20
#   9.57462819e-01 3.33328605e-13]
#  [3.20689297e-11 7.42324257e-08 5.62529910e-19 ... 2.05682936e-16
#   1.07622653e-12 1.41200115e-02]
#  [5.06603174e-06 8.50852457e-11 5.51467429e-10 ... 9.98493133e-01
#   1.97896353e-14 2.38078250e-05]]
# D1 [[1 1 1 ... 1 1 1]
#  [1 1 1 ... 1 1 1]
#  [1 1 1 ... 1 1 1]
#  ...
#  [1 1 0 ... 0 1 1]
#  [1 1 0 ... 1 1 1]
#  [1 1 1 ... 0 1 1]]
# D2 [[1 0 1 ... 1 0 1]
#  [0 0 0 ... 1 1 1]
#  [1 0 1 ... 1 1 1]
#  ...
#  [1 1 1 ... 1 1 0]
#  [1 1 1 ... 1 1 1]
#  [1 1 1 ... 1 1 0]]